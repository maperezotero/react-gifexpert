{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEfC,mBAAS,IAFM,mBAE5CC,EAF4C,KAEhCC,EAFgC,KAiBnD,OACC,sBAAMC,SAVc,SAACC,GACrBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKf,SACC,uBACCO,KAAK,OACLC,MAAQT,EACRU,SAlBuB,SAACP,GAC1BF,EAAeE,EAAEQ,OAAOF,a,+BCPbG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEhBC,EAFgB,iDAEiCC,UAAWH,GAF5C,+DAGHI,MAAOF,GAHJ,cAGhBG,EAHgB,gBAIEA,EAAKC,OAJP,uBAIdC,EAJc,EAIdA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVd,kBAcfM,GAde,4CAAH,sDCCPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAErC,OACC,sBAAKc,UAAU,2CAAf,UACC,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCHKO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEjBd,mBAAS,CAClCqB,KAAM,GACNa,SAAS,IAJiC,mBAEpCC,EAFoC,KAE7BC,EAF6B,KAsB3C,OAfAC,qBAAW,WAEVxB,EAASC,GACPwB,MAAM,SAAAC,GAEPC,QAAQC,IAAIF,GACZH,EAAS,CACRf,KAAMkB,EACNL,SAAS,SAKT,CAAEpB,IAEEqB,EDnB0BO,CAAc5B,GAAlCa,EAF2B,EAEhCN,KAAaa,EAFmB,EAEnBA,QAErB,OACC,qCACC,qBAAIJ,UAAU,sCAAd,cAAsDhB,EAAtD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEGH,EAAOJ,KAAK,SAAAC,GAAG,OACd,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEUHkB,EAxBM,WAAO,IAAD,EAEU3C,mBAAS,CAAC,cAFpB,mBAEnB4C,EAFmB,KAEP7C,EAFO,KAI1B,OACC,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEE6C,EAAWrB,KAAK,SAAAT,GAAQ,OACvB,cAAC,EAAD,CAECA,SAAWA,GADLA,YCZb+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.46f8d400.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue( e.target.value );\r\n\t}\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif ( inputValue.trim().length > 2 ){\r\n\t\t\tsetCategories( cats => [ inputValue, ...cats ] );\r\n\t\t\tsetInputValue('');\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={ handleSubmit }>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={ inputValue }\r\n\t\t\t\tonChange={ handleInputChange }\r\n\t\t\t/>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=jSwvPKwLjn43h7ZgOS4UA1wiFNqeudsq`;\r\n\tconst resp = await fetch( url );\r\n\tconst { data } =  await resp.json();\r\n\r\n\tconst gifs = data.map( img => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t}\r\n\t} );\r\n\r\n\treturn gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"card animate__animated animate__fadeInUp\">\r\n\t\t\t<img src={ url } alt={ title } />\r\n\t\t\t<p>{ title }</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\tconst { data:images, loading } = useFetchGifs( category );\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className=\"animate__animated animate__fadeInUp\"> {category } </h3>\r\n\r\n\t\t\t{ loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\timages.map( img => (\r\n\t\t\t\t\t\t\t<GifGridItem \r\n\t\t\t\t\t\t\t\tkey={ img.id }\r\n\t\t\t\t\t\t\t\t{ ...img }\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t) )\r\n\t\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect( () => {\r\n\r\n\t\tgetGifs( category )\r\n\t\t .then( imgs => {\r\n\t\t\t\t\r\n\t\t\tconsole.log(imgs)\r\n\t\t\tsetState({\r\n\t\t\t\tdata: imgs,\r\n\t\t\t\tloading: false,\r\n\t\t\t});\r\n\r\n\t\t } )\r\n\r\n\t}, [ category ] )\r\n\r\n\treturn state; // { data: [], loading: true };\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n\tconst [categories, setCategories] = useState(['One Punch']);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n\t\t\t<AddCategory setCategories={ setCategories } />\r\n\t\t\t<hr />\r\n\r\n\t\t\t<ol>\r\n\t\t\t\t{\r\n\t\t\t\t\tcategories.map( category => \r\n\t\t\t\t\t\t<GifGrid \r\n\t\t\t\t\t\t\tkey={ category }\r\n\t\t\t\t\t\t\tcategory={ category } \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t</ol>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}